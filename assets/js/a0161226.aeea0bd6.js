"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[161],{3905:(e,n,r)=>{r.d(n,{Zo:()=>o,kt:()=>c});var t=r(67294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function d(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=t.createContext({}),u=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},o=function(e){var n=u(e.components);return t.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,o=d(e,["components","mdxType","originalType","parentName"]),h=u(r),c=i,p=h["".concat(l,".").concat(c)]||h[c]||m[c]||s;return r?t.createElement(p,a(a({ref:n},o),{},{components:r})):t.createElement(p,a({ref:n},o))}));function c(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=r.length,a=new Array(s);a[0]=h;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:i,a[1]=d;for(var u=2;u<s;u++)a[u]=r[u];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}h.displayName="MDXCreateElement"},38160:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var t=r(87462),i=(r(67294),r(3905));const s={},a=void 0,d={unversionedId:"morphbot/bots2learn",id:"morphbot/bots2learn",title:"bots2learn",description:"Bots2LEarn \u2013 selbst fahrender Roboter",source:"@site/docs/10_morphbot/bots2learn.md",sourceDirName:"10_morphbot",slug:"/morphbot/bots2learn",permalink:"/docs/morphbot/bots2learn",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Apertures",permalink:"/docs/PRODUCTION/Modules/APERTURES"},next:{title:"openUC2 Documentation",permalink:"/docs/intro"}},l={},u=[{value:"1.1 Was ist ein Arduino?",id:"11-was-ist-ein-arduino",level:2},{value:"1.2. Die Arduino IDE",id:"12-die-arduino-ide",level:2},{value:"1.3 Aufbau eines Programms",id:"13-aufbau-eines-programms",level:2},{value:"1.4 Erste Schritte",id:"14-erste-schritte",level:2},{value:"1.4.1 Das erste Programm",id:"141-das-erste-programm",level:3},{value:"1.4.2 Eine LED am Breadboard",id:"142-eine-led-am-breadboard",level:3},{value:"2.1 Fotowiderstand",id:"21-fotowiderstand",level:2},{value:"2.1.1 Exkurs: Ohmsches Gesetz und Reihenschaltung",id:"211-exkurs-ohmsches-gesetz-und-reihenschaltung",level:3},{value:"2.1.2 Den Fotowiderstand benutzen",id:"212-den-fotowiderstand-benutzen",level:3},{value:"2.2 Ultraschallsensor",id:"22-ultraschallsensor",level:2}],o={toc:u};function m(e){let{components:n,...s}=e;return(0,i.kt)("wrapper",(0,t.Z)({},o,s,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Bots2LEarn \u2013 selbst fahrender Roboter"),(0,i.kt)("h1",{id:"1-grundlagen"},"1. Grundlagen"),(0,i.kt)("h2",{id:"11-was-ist-ein-arduino"},"1.1 Was ist ein Arduino?"),(0,i.kt)("p",null,"Ein Arduino ist ein Microcontroller, der darauf spezialisiert ist,\neingehende Signale (Inputs) zu verarbeiten und entsprechend seiner\nProgrammierung Signale auszugeben (Outputs). Der Arduino kann sowohl\ndigitale Signale (Spannung an/Spannung aus) als auch analoge Signale\n(verschiedene Spannungen) verarbeiten. Daf\xfcr besitzt er unterschiedliche\nAnschl\xfcsse, die \u201ePins\u201c genannt werden. Es gibt verschiedene Varianten\n(\u201eBoards\u201c) des Arduino. In diesem Kurs werden wir den Arduino-Nano\nverwenden."),(0,i.kt)("h2",{id:"12-die-arduino-ide"},"1.2. Die Arduino IDE"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Zum Programmieren des Arduinos verwenden wir die Arduino IDE. Diese\nfindet ihr unter:\n",(0,i.kt)("a",{parentName:"p",href:"https://www.arduino.cc/en/software#download"},"Download")),(0,i.kt)("p",null,"W\xe4hlt hier die f\xfcr euer Betriebssystem passende Version aus und ladet\nsie herunter."),(0,i.kt)("p",null,"Ihr \xf6ffnet die IDE mit einem Doppelklick auf die Desktop-Verkn\xfcpfung.\nDanach \xf6ffnet sich das folgende Fenster:"),(0,i.kt)("p",null,(0,i.kt)("img",{src:r(67737).Z,width:"486",height:"596"})),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Abbildung 1: Das Fenster der IDE"))),(0,i.kt)("h2",{id:"13-aufbau-eines-programms"},"1.3 Aufbau eines Programms"),(0,i.kt)("p",null,"In jedem neu ge\xf6ffneten Programm (\u201esketch\u201c) befindet sich bereits der\nfolgende Code:"),(0,i.kt)("p",null,"Abbildung 2: Grundstruktur eines Arduinoprogramms"),(0,i.kt)("p",null,"Ein Arduino-Programm hat mindestens zwei Abschnitte: Das setup und die\nloop. \xdcber dem setup k\xf6nnen Variablen definiert und libraries importiert\nwerden. Ihr k\xf6nnt sp\xe4ter eure Programme mit eigenen Abschnitten\n(\u201eFunktionen\u201c) erweitern."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"setup\n")),(0,i.kt)("p",null,"Alle Befehle des Setups werden nur einmal zu Beginn des Programms\nausgef\xfchrt. Dazu geh\xf6rt unter anderem das Initialisieren der Pins und\ndes Seriellen Monitors."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"loop\n")),(0,i.kt)("p",null,"Die Befehle der Loop (\u201eSchleife\u201c) werden nach einmaliger Ausf\xfchrung des\nSetups endlos wiederholt. In der Loop befindet sich das eigentliche\nProgramm, also die Aktionen die der Arduino durchf\xfchren soll."),(0,i.kt)("h2",{id:"14-erste-schritte"},"1.4 Erste Schritte"),(0,i.kt)("h3",{id:"141-das-erste-programm"},"1.4.1 Das erste Programm"),(0,i.kt)("p",null,"Das erste Programm, welches ihr selber schreiben sollt, soll die LED auf\ndem Arduino-Board blinken lassen."),(0,i.kt)("p",null,"Material: Arduino Nano, Verbindungskabel"),(0,i.kt)("p",null,"Im Setup f\xfcgt ihr den Befehl"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"pinMode(13,OUTPUT);\n\nhinzu. Mit dem Befehl pinMode() legt ihr fest, welche Pins ihr verwenden\nwollt, und ob diese Pins Input oder Output sind.\n\nIn der loop f\xfcgt ihr die Befehle:\n\ndigitalWrite(13,HIGH);\n\ndelay(1000);\n\ndigitalWrite(13,LOW);\n\ndelay(1000);\n")),(0,i.kt)("p",null,"hinzu. Der Befehl digitalWrite() wird benutzt, um die digitalen Pins des\nArduino anzusteuern. Angegeben wird der Pin, der angesteuert werden soll\nund den Zustand, den der Pin annehmen soll. Digitale Pins k\xf6nnen die\nZust\xe4nde HIGH oder LOW annehmen."),(0,i.kt)("p",null,"Mit delay() k\xf6nnt ihr Pausen in euer Programm einf\xfcgen. Dazu gebt ihr\neine Zeitspanne in Millisekunden an. Eine Sekunde sind 1000\nMillisekunden."),(0,i.kt)("p",null,"Das Fenster der IDE sollte nun so aussehen:"),(0,i.kt)("p",null,"Nun klickt ihr auf das H\xe4kchen links oben. Anschlie\xdfend wird sich ein\nFenster \xf6ffnen, dass von euch verlangt euer Programm zu speichern. W\xe4hlt\neinen aussagekr\xe4ftigen Namen aus und speichert das Programm unter einem\nsinnfollen Namen ( LED","_","Blinken","_","lassen). Achtet dabei darauf keine\nSonderzeichen, Lerzeichen oder umlaute zu nutzen. Jetzt steht in der\nZeile unter eurem Code \u201eKompilieren abgeschlossen.\u201c Kompilieren\nbedeutet, dass der Computer das Programm so \xfcbersetzt, dass der Arduino\nes auch versteht."),(0,i.kt)("p",null,"Anschlie\xdfend verbindet ihr euren Arduino \xfcber das Verbindungskabel mit\neurem Computer. Nun m\xfcsst ihr nur noch der IDE mitteilen, wo der Arduino\nangeschlossen ist. Dazu klickt ihr auf \u201eWerkzeuge\u201c. Stellt sicher, dass\nbei \u201eBoard\u201c der passende Arduino ausgew\xe4hlt ist (meist der Arduino Uno).\nDirekt darunter, bei \u201ePort\u201c m\xfcsst ihr den Anschluss ausw\xe4hlen."),(0,i.kt)("p",null,"Jetzt seid ihr bereit, das Programm hochzuladen. Klickt dazu auf den\nPfeil nach rechts, direkt neben dem H\xe4kchen."),(0,i.kt)("p",null,"Nachdem das Programm hochgeladen wurde (dies dauert einige Sekunden),\nsollte die LED auf dem Arduino-Board blinken, mit jeweils einer Sekunde\nleuchten und einer Sekunde Pause."),(0,i.kt)("h3",{id:""}),(0,i.kt)("h3",{id:"142-eine-led-am-breadboard"},"1.4.2 Eine LED am Breadboard"),(0,i.kt)("p",null,"F\xfcr eure erste Schaltung sollt ihr eine LED auf dem Breadboard mit dem\nArduino ansteuern."),(0,i.kt)("p",null,"Material: LED, Widerstand mit 100\u03a9 oder 200\u03a9, Breadboard, Jumperkabel,\nArduino Nano, Verbindungskabel"),(0,i.kt)("p",null,"Steckt zun\xe4chst die LED auf dem Breadboard fest. Achtet dabei darauf,\ndass die beiden Dr\xe4hte (Pole) der LED nicht \xfcber das Breadboard\nverbunden sind. Verbindet einen Pol des Widerstands mit dem k\xfcrzeren\nBein (Minuspol) der LED."),(0,i.kt)("p",null,"Anschlie\xdfend verbindet ihr das l\xe4ngere Bein (der Pluspol) der LED mit\neinem digitalen Pin und den zweiten Pol des Widerstands mit einem der\nGND-Pins."),(0,i.kt)("p",null,"Abbildung 3: Schaltbild 1.4"),(0,i.kt)("p",null,"Als Programm benutzen wir den Sketch aus 1.4.1. Entweder ihr schlie\xdft\ndie LED an Pin 13 an, oder ihr verwendet einen anderen Pin. Letzteres\nbedeutet aber, dass ihr im Programm die Pinnummer \xe4ndern m\xfcsst."),(0,i.kt)("h1",{id:"2-bauteile-am-roboter"},"2. Bauteile am Roboter"),(0,i.kt)("h2",{id:"21-fotowiderstand"},"2.1 Fotowiderstand"),(0,i.kt)("h3",{id:"211-exkurs-ohmsches-gesetz-und-reihenschaltung"},"2.1.1 Exkurs: Ohmsches Gesetz und Reihenschaltung"),(0,i.kt)("p",null,"In einem Stromkreis werden drei verschiedene Werte unterschieden: Die\nSpannung (U), der Strom (I) und der Widerstand (R). Ver\xe4ndert sich einer\nder Werte, hat das auch Einfluss auf die anderen Werte. Diese\nVer\xe4nderungen werden durch das Ohmsche Gesetz beschrieben."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"*U*\u2004=\u2004*R*\u2005\u2022\u2005*I*\xa0\xa0\n")),(0,i.kt)("p",null,"Eine M\xf6glichkeit, Widerst\xe4nde in einer Schaltung zu kombinieren nennt\nsich Reihenschaltung. Die besondere Eigenschaft der Reihenschaltung ist,\ndass der Strom durch die Widerst\xe4nde gleichbleibt, sich aber die\nSpannung ver\xe4ndert. Eine solche Schaltung mit zwei Widerst\xe4nden\nbezeichnet man auch als Spannungsteiler."),(0,i.kt)("h3",{id:"212-den-fotowiderstand-benutzen"},"2.1.2 Den Fotowiderstand benutzen"),(0,i.kt)("p",null,"Material: Arduino Nano, Breadboard, Fotowiderstand, 1x 1k\u03a9 Widerstand,\nBreadboardkabel"),(0,i.kt)("p",null,"Um die Lichtst\xe4rke mit einem Fotowiderstand zu messen ben\xf6tigen wir\neinen Spannungsteiler. Dieser besteht aus einem festen Widerstand von\n1000\u03a9 und dem Fotowiderstand. Der Fotowiderstand wird am ersten Kontakt\nmit dem Pin 5V, am zweiten Kontakt mit einem analogen Pin und dem festen\nWiderstand verbunden. Der zweite Kontakt des festen Widerstands wird mit\ndem Pin GND verbunden."),(0,i.kt)("p",null,"Abbildung 4: Schaltbild 2.1"),(0,i.kt)("p",null,"Um die Werte des Fotowiderstands auslesen zu k\xf6nnen ben\xf6tigen wir einen\nweiteren Befehl: analogRead(). Mit analogRead() lassen sich analoge Pins\nauslesen. Das Ergebnis ist eine ganze Zahl im Bereich von 0 bis 1023."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"int variablenname=analogRead(Pinnummer);\n")),(0,i.kt)("p",null,"Die Nummern von analogen Pins beginnen stets mit einem \u201eA\u201c."),(0,i.kt)("p",null,"Ein Programm zum Auslesen eines Fotowiderstandes sieht zum Beispiel so\naus:"),(0,i.kt)("p",null,"Wenn ihr dieses Programm ausf\xfchrt, liest der Arduino den Wert an Pin A3\naus. Allerdings erfahren wir nicht, welcher Wert ausgelesen wird, bzw.\nwie sich der ausgelesene Wert (und damit die Lichtverh\xe4ltnisse) \xe4ndern.\nDamit wir die Werte lesen k\xf6nnen ben\xf6tigen wir den Seriellen Monitor.\nMit diesem kann man w\xe4hrend der Ausf\xfchrung des Programms die Werte von\nVariablen und sogar Texte auf dem Bildschirm ausgeben lassen."),(0,i.kt)("p",null,"Zun\xe4chst muss der Serielle Monitor initialisiert werden. Dazu schreibt\nihr den Befehl:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"Serial.begin(9600);\n")),(0,i.kt)("p",null,"In das setup. Um den Wert auszugeben erg\xe4nzt man die loop um den Befehl:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"Serial.println(wert);\n")),(0,i.kt)("p",null,"Nun ladet ihr das Programm auf den Arduino hoch. Erst wenn das Hochladen\nabgeschlossen ist k\xf6nnt ihr den Seriellen Monitor \xf6ffnen. Dies geht \xfcber\nden Men\xfcpunkte \u201eWerkzeuge\u201c-",">"," \u201eSerieller Monitor\u201c oder \xfcber dieses\nSymbol rechts oben im Programmfenster:"),(0,i.kt)("p",null,"Die Werte die der Arduino ausliest werden nun in Echtzeit ausgegeben,\nviel zu schnell um sie zu lesen. Wir erg\xe4nzen daher die Loop um einen\ndelay-Befehl mit 100ms Dauer. Der Arduino f\xfchrt nun nur noch ca. 10\nMessungen pro Sekunde durch, wodurch wir die Werte besser ablesen\nk\xf6nnen."),(0,i.kt)("h2",{id:"22-ultraschallsensor"},"2.2 Ultraschallsensor"),(0,i.kt)("p",null,"Material: Arduino Nano, Breadboardkabel, Ultraschallsensor"),(0,i.kt)("p",null,"Ein Ultraschallsensor wird verwendet, um Entfernungen zu messen. Er\nsendet aus einem seiner \u201eAugen\u201c (P\xf6tte) einen Ultraschallimpuls. Dieser\nprallt von Hindernissen vor dem Ultraschallsensor ab und wird vom\nanderen \u201eAuge\u201c des Sensors empfangen. Mit der Zeit, die zwischen diesen\nImpulsen vergeht sowie der Schallgeschwindigkeit l\xe4sst sich die Distanz\nzum Hindernis ausrechnen. \xb4"),(0,i.kt)("p",null,"Der Ultraschallsensor besitzt 4 Anschl\xfcsse. Wir verbinden den Anschluss\nVCC mit 5V am Arduino, GND mit GND und Trig und Echo mit jeweils einem\ndigitalen Pin. Im Setup definieren wir Trig (kurz f\xfcr \u201eTrigger\u201c) als\nOutput und Echo als Input."),(0,i.kt)("p",null,"Abbildung 5: Schaltbild 2.2"),(0,i.kt)("p",null,"Um die Entfernung zu messen schalten wir zun\xe4chst den Trigger-Pin f\xfcr\neine kurze Zeit auf LOW, und danach f\xfcr 10ms auf HIGH, um einen\nUltraschallimpuls auszusenden."),(0,i.kt)("p",null,"Mit dem Befehl pulseIn() wird die Zeit gemessen, bis der Echo-Pin ein\nSignal empf\xe4ngt:"))}m.isMDXComponent=!0},67737:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/image1-b366d954f4cb3ac3c6d865b6c3608017.png"}}]);