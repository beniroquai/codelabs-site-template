"use strict";(self.webpackChunkuc_2_docs=self.webpackChunkuc_2_docs||[]).push([[2526],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,d=m["".concat(c,".").concat(u)]||m[u]||h[u]||a;return n?i.createElement(d,o(o({ref:t},p),{},{components:n})):i.createElement(d,o({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},74068:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var i=n(87462),r=(n(67294),n(3905));const a={},o="ImSwitch in Docker II Tutorial",l={unversionedId:"ImSwitch/ImSwitchDocker2",id:"ImSwitch/ImSwitchDocker2",title:"ImSwitch in Docker II Tutorial",description:"This tutorial outlines how to set up and run ImSwitch using Docker, where ImSwitch is deployed as a Python application inside a container. The container uses an Ubuntu image with all required libraries and dependencies, including UC2-REST for ESP32 control, and provides access to ImSwitch via a FastAPI-based REST API server.",source:"@site/docs/04_ImSwitch/ImSwitchDocker2.md",sourceDirName:"04_ImSwitch",slug:"/ImSwitch/ImSwitchDocker2",permalink:"/docs/ImSwitch/ImSwitchDocker2",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ImSwitch in Docker",permalink:"/docs/ImSwitch/ImSwitchDocker"},next:{title:"ImSwitch Experimental Features Documentation",permalink:"/docs/ImSwitch/ImSwitchExperimental"}},c={},s=[{value:"Setup Overview",id:"setup-overview",level:2},{value:"One-Step Installation (Raspi + Debian?)",id:"one-step-installation-raspi--debian",level:3},{value:"Two-step installation (most other cases)",id:"two-step-installation-most-other-cases",level:4},{value:"Building the Docker Image",id:"building-the-docker-image",level:3},{value:"Running ImSwitch via Docker",id:"running-imswitch-via-docker",level:3},{value:"Key Entry Points",id:"key-entry-points",level:3},{value:"Accessing the REST API",id:"accessing-the-rest-api",level:3}],p={toc:s};function h(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"imswitch-in-docker-ii-tutorial"},"ImSwitch in Docker II Tutorial"),(0,r.kt)("p",null,"This tutorial outlines how to set up and run ImSwitch using Docker, where ImSwitch is deployed as a Python application inside a container. The container uses an Ubuntu image with all required libraries and dependencies, including UC2-REST for ESP32 control, and provides access to ImSwitch via a FastAPI-based REST API server."),(0,r.kt)("h2",{id:"setup-overview"},"Setup Overview"),(0,r.kt)("p",null,"ImSwitch is a modular Python application installed inside a Docker container. The process includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Creating an isolated environment with all necessary libraries."),(0,r.kt)("li",{parentName:"ul"},"Pulling and installing ImSwitch from the latest GitHub master branch."),(0,r.kt)("li",{parentName:"ul"},"Installing the UC2-REST library to control external devices like ESP32."),(0,r.kt)("li",{parentName:"ul"},"Setting up FastAPI to expose a REST API interface for remote control."),(0,r.kt)("li",{parentName:"ul"},"Running a React app on top of the REST API for web-based control.")),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(57221).Z,width:"5550",height:"3350"})),(0,r.kt)("h3",{id:"one-step-installation-raspi--debian"},"One-Step Installation (Raspi + Debian?)"),(0,r.kt)("p",null,"For Debian-based systems (Raspberry Pi and others), there is a one-step installation script that installs Docker, camera drivers, and pulls the Docker container for ImSwitch:"),(0,r.kt)("p",null,"Repository: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/openUC2/ImSwitchDockerInstall"},"openUC2/ImSwitchDockerInstall"),"\nScript: ",(0,r.kt)("inlineCode",{parentName:"p"},"install_all.sh")," installs everything you need."),(0,r.kt)("h4",{id:"two-step-installation-most-other-cases"},"Two-step installation (most other cases)"),(0,r.kt)("p",null,"Pull the docker-container and run it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull ghcr.io/openuc2/imswitch-noqt-x64:latest\nsudo docker run -it --rm -p 8001:8001 -p 2222:22 -e HEADLESS=1 -e HTTP_PORT=8001 -e CONFIG_FILE=example_uc2_hik_flowstop.json -e UPDATE_GIT=0 -e UPDATE_CONFIG=0 --privileged ghcr.io/openuc2/imswitch-noqt-x64:latest\n")),(0,r.kt)("p",null,"More information about this here:\n",(0,r.kt)("a",{parentName:"p",href:"https://openuc2.github.io/docs/ImSwitch/ImSwitchDocker#docker-quick-start"},"https://openuc2.github.io/docs/ImSwitch/ImSwitchDocker#docker-quick-start")),(0,r.kt)("h3",{id:"building-the-docker-image"},"Building the Docker Image"),(0,r.kt)("p",null,"ImSwitch and UC2-REST are cloned and installed into the Docker image directly from the latest commits. During each build, the Git archives are fetched again, ensuring the installation is up-to-date without starting from scratch."),(0,r.kt)("p",null,"The Dockerfile for ImSwitch can be found here:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/openUC2/ImSwitch/blob/master/dockerfile"},"Dockerfile")),(0,r.kt)("h3",{id:"running-imswitch-via-docker"},"Running ImSwitch via Docker"),(0,r.kt)("p",null,"After the Docker image is built, you can run the container with ImSwitch by specifying the necessary parameters. Here\u2019s an example startup script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'params=()\nif [[ $HEADLESS == "1" || $HEADLESS == "True" || $HEADLESS == "true" ]]; then\n    params+=" --headless"\nfi;\nif [[ $ssl == "0" || $ssl == "False" || $ssl == "false" ]]; then\n    params+=" --no-ssl"\nfi;\nparams+=" --http-port ${HTTP_PORT:-8001}"\nparams+=" --config-folder ${CONFIG_PATH:-None}"\nparams+=" --config-file ${CONFIG_FILE:-None}"\nparams+=" --ext-data-folder ${DATA_PATH:-None}"\n\necho \'Starting ImSwitch with the following parameters:\'\necho "${params[@]}"\npython3 /tmp/ImSwitch/main.py $params\n')),(0,r.kt)("h3",{id:"key-entry-points"},"Key Entry Points"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Main Execution"),":\nImSwitch is launched from the main Python script, where configuration files and parameters are passed to set up the environment."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Entry point file:\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/openUC2/ImSwitch/blob/master/main.py"},"main.py"),(0,r.kt)("a",{parentName:"li",href:"https://github.com/openUC2/ImSwitch/blob/master/imswitch/__main__.py"},(0,r.kt)("strong",{parentName:"a"},"main"),".py")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"API Decorators"),":\nFunctions decorated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@APIExport")," are automatically exposed as API endpoints in the FastAPI server."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"API definition:\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/openUC2/ImSwitch/blob/acd12e24d124e0dbf7759af2a9afa7eb9a02eed6/imswitch/imcontrol/controller/server/ImSwitchServer.py#L171"},"ImSwitchServer.py#L171"))))),(0,r.kt)("h3",{id:"accessing-the-rest-api"},"Accessing the REST API"),(0,r.kt)("p",null,"The REST API server runs on port 8001 by default, with SSL enabled. You can interact with the API through the following interfaces:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Swagger UI"),":\nAccess the API documentation here:\n",(0,r.kt)("inlineCode",{parentName:"p"},"https://localhost:8001/docs"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Web Interface"),":\nA React app is served on top of the REST API:\n",(0,r.kt)("inlineCode",{parentName:"p"},"https://localhost:8001/imswitch/index.html")))),(0,r.kt)("p",null,"With this setup, you now have a running ImSwitch instance inside Docker, accessible via both API and web-based interfaces for control and configuration."))}h.isMDXComponent=!0},57221:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/ImSwitchDocker-784e820fea4854c3e4c3d189f65c65e2.png"}}]);